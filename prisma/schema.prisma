// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  username       String?        @unique
  name           String
  email          String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  imageUrl       String?
  clerkUserId    String         @unique
  events         Event[]
  meetings       Meeting[]
  availabilities Availability[]
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  duration    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isPrivate   Boolean   @default(true)
  User        User?     @relation(fields: [userId], references: [id])
  userId      String?
  meetings    Meeting[]
}

model Meeting {
  id             String   @id @default(cuid())
  name           String
  startTime      DateTime
  endTime        DateTime
  additionalInfo String?
  meetLink       String
  googleEventId  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Event          Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId        String?
  User           User?    @relation(fields: [userId], references: [id])
  userId         String?
}

model Availability {
  id                String             @id @default(cuid())
  timeGap           Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  dayAvailabilities Day_Availability[]
  User              User?              @relation(fields: [userId], references: [id])
  userId            String?
}

model Day_Availability {
  id             String        @id @default(cuid())
  day            DayOfWeek
  startTime      DateTime
  endTime        DateTime
  Availability   Availability? @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  availabilityId String?
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
